# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do |options|
  gradle(task:"clean")

  keyStoreProperties = parse_properties_file(
      path: "./fastlane/keystore.properties"
    )
    keyAlias = keyStoreProperties[:keyAlias]
#   puts puts lane_context[SharedValues::BUILD_NUMBER]
UI.important("keyStoreProperties =#{keyStoreProperties[:storeFile]}")
UI.important("keyStoreProperties =#{keyStoreProperties[:storePassword]}")
UI.important("keyStoreProperties =#{keyStoreProperties[:keyAlias]}")
UI.important("keyStoreProperties =#{keyStoreProperties[:keyPassword]}")
UI.important("keyStoreProperties =#{lane_context[:project_dir]}")

 puts lane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`
puts lane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`
puts lane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_
puts lane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app
puts lane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_
puts lane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_
puts lane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_
puts lane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile
puts lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`
puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`
puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`
puts lane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`
puts lane_context[SharedValues::GRADLE_BUILD_TYPE]           
    gradle(
      task: "assemble",
      flavor: "Prod",
      build_type: "Release",
      ##If you need to pass sensitive information through the gradle action, and don't want the generated command to be printed before it is run, you can suppress that:
      print_command: false,
      ##You can also suppress printing the output generated by running the generated Gradle command:
      print_command_output: false,
      #To pass any other CLI flags to gradle use
#       flags: "--exitcode --xml file.xml",
       properties: {
          "exampleNumber" => 100,
          "exampleString" => "1.0.0",
          "android.injected.signing.store.file" => keyStoreProperties[:storeFile],
              "android.injected.signing.store.password" => keyStoreProperties[:storePassword],
              "android.injected.signing.key.alias" => keyStoreProperties[:keyAlias],
              "android.injected.signing.key.password" => keyStoreProperties[:keyPassword],
        }
    )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")

      UI.message "Neutral message (usually white)"
      UI.success "Successfully finished processing (usually green)"
      UI.error "Wahaha, what's going on here! (usually red)"
      UI.important "Make sure to use Windows (usually yellow)"

      UI.header "Inputs" # a big box

      name = UI.input("What's your name? ")
      if UI.confirm("Are you '#{name}'?")
        UI.success "Oh yeah"
      else
        UI.error "Wups, invalid"
      end

      UI.password("Your password please: ") # password inputs are hidden

      ###### A "Dropdown" for the user
      project = UI.select("Select your project: ", ["Test Project", "Test Workspace"])

      UI.success("Okay #{name}, you selected '#{project}'")
    upload_to_play_store
  end

  lane :testYarn do
    yarn(step_name: 'test')
#     yarn(command: 'build', step_name: 'building_project')
#     yarn(command: 'test', step_name: 'testing_project')
#     yarn(command: 'publish-coverage', step_name: 'publishing_project')
  end

  lane :first_lane do |options|
    puts "If you run: `fastlane first_lane`"
#     puts "You'll see this!"
    second_lane
    second_lane
    puts "As well as this!"
  end

  private_lane :second_lane do |options|
  puts "This is second_lane"
    next
    puts "This won't be shown"
  end


  after_all do |lane, options|
    # ...
    puts "after_all"
    commit = last_git_commit
    pilot(changelog: commit[:message]) # message of commit
    author = commit[:author] # author of the commit
    author_email = commit[:author_email] # email of the author of the commit
    hash = commit[:commit_hash] # long sha of commit
    short_hash = commit[:abbreviated_commit_hash] # short sha of commit

    UI.message author
    UI.message author_email
    UI.message hash
    UI.message short_hash
  end

  after_each do |lane, options|
    # ...

    puts "after_each"
  end

  before_all do |lane, options|
      # ...
      puts "before_all"

    end

  before_each do |lane, options|
      # ...

      puts "before_each"
  end


end
